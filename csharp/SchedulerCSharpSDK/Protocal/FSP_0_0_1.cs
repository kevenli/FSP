// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Flowy.Scheduler.CSharpSDK.Protocal {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class FSP_0_0_1 {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_LoginRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Flowy.Scheduler.CSharpSDK.Protocal.LoginRequest, global::Flowy.Scheduler.CSharpSDK.Protocal.LoginRequest.Builder> internal__static_LoginRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_LoginResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Flowy.Scheduler.CSharpSDK.Protocal.LoginResponse, global::Flowy.Scheduler.CSharpSDK.Protocal.LoginResponse.Builder> internal__static_LoginResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_WorkerRegisterRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Flowy.Scheduler.CSharpSDK.Protocal.WorkerRegisterRequest, global::Flowy.Scheduler.CSharpSDK.Protocal.WorkerRegisterRequest.Builder> internal__static_WorkerRegisterRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_WorkerRegisterResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Flowy.Scheduler.CSharpSDK.Protocal.WorkerRegisterResponse, global::Flowy.Scheduler.CSharpSDK.Protocal.WorkerRegisterResponse.Builder> internal__static_WorkerRegisterResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_StartListenRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Flowy.Scheduler.CSharpSDK.Protocal.StartListenRequest, global::Flowy.Scheduler.CSharpSDK.Protocal.StartListenRequest.Builder> internal__static_StartListenRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_TaskNotify__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Flowy.Scheduler.CSharpSDK.Protocal.TaskNotify, global::Flowy.Scheduler.CSharpSDK.Protocal.TaskNotify.Builder> internal__static_TaskNotify__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_TaskStatusUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Flowy.Scheduler.CSharpSDK.Protocal.TaskStatusUpdate, global::Flowy.Scheduler.CSharpSDK.Protocal.TaskStatusUpdate.Builder> internal__static_TaskStatusUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_TaskStart__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Flowy.Scheduler.CSharpSDK.Protocal.TaskStart, global::Flowy.Scheduler.CSharpSDK.Protocal.TaskStart.Builder> internal__static_TaskStart__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_TaskRunning__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Flowy.Scheduler.CSharpSDK.Protocal.TaskRunning, global::Flowy.Scheduler.CSharpSDK.Protocal.TaskRunning.Builder> internal__static_TaskRunning__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_TaskComplete__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Flowy.Scheduler.CSharpSDK.Protocal.TaskComplete, global::Flowy.Scheduler.CSharpSDK.Protocal.TaskComplete.Builder> internal__static_TaskComplete__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static FSP_0_0_1() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cglmc3AucHJvdG8aJGdvb2dsZS9wcm90b2J1Zi9jc2hhcnBfb3B0aW9ucy5w" + 
          "cm90byIyCgxMb2dpblJlcXVlc3QSDgoGYXBwX2lkGAEgAigJEhIKCmFwcF9z" + 
          "ZWNyZXQYAiACKAkihQEKDUxvZ2luUmVzcG9uc2USMgoKcmVzdWx0VHlwZRgB" + 
          "IAIoDjIeLkxvZ2luUmVzcG9uc2UuTG9naW5SZXN1bHRUeXBlEhQKCmZhaWxS" + 
          "ZWFzb24YAiABKAk6ACIqCg9Mb2dpblJlc3VsdFR5cGUSCwoHU1VDQ0VTUxAA" + 
          "EgoKBkZBSUxFRBABIuIBChVXb3JrZXJSZWdpc3RlclJlcXVlc3QSEQoJd29y" + 
          "a2VyX2lkGAEgAigJEhMKC3dvcmtlcl9uYW1lGAIgAigJEhQKDGV4ZWN1dGVf" + 
          "dGltZRgDIAMoCRIPCgd0aW1lb3V0GAQgAigFEksKFGV4ZWN1dGVfbGFzdF9l" + 
          "eHBpcmVkGAUgAigOMi0uV29ya2VyUmVnaXN0ZXJSZXF1ZXN0LkV4ZWN1dGVM" + 
          "YXN0RXhwaXJlZFR5cGUiLQoWRXhlY3V0ZUxhc3RFeHBpcmVkVHlwZRIHCgNS" + 
          "VU4QABIKCgZJR05PUkUQASIrChZXb3JrZXJSZWdpc3RlclJlc3BvbnNlEhEK" + 
          "CXdvcmtlcl9pZBgBIAIoCSInChJTdGFydExpc3RlblJlcXVlc3QSEQoJd29y" + 
          "a2VyX2lkGAEgAigJIjAKClRhc2tOb3RpZnkSEQoJd29ya2VyX2lkGAEgAigJ" + 
          "Eg8KB3Rhc2tfaWQYAiACKAkitwEKEFRhc2tTdGF0dXNVcGRhdGUSEQoJd29y" + 
          "a2VyX2lkGAEgAigJEg8KB3Rhc2tfaWQYAiACKAkSKAoGc3RhdHVzGAMgAigO" + 
          "MhguVGFza1N0YXR1c1VwZGF0ZS5TdGF0dXMSEgoKcGVyY2VudGFnZRgEIAEo" + 
          "BRIVCg1lcnJvcl9tZXNzYWdlGAUgASgJIioKBlN0YXR1cxIJCgVTVEFSVBAA" + 
          "EgsKB1JVTk5JTkcQARIICgRTVE9QEAIiLwoJVGFza1N0YXJ0EhEKCXdvcmtl" + 
          "cl9pZBgBIAIoCRIPCgd0YXNrX2lkGAIgAigJIkgKC1Rhc2tSdW5uaW5nEhEK" + 
          "CXdvcmtlcl9pZBgBIAIoCRIPCgd0YXNrX2lkGAIgAigJEhUKCnBlcmNlbnRh" + 
          "Z2UYAyABKAU6ATAipAEKDFRhc2tDb21wbGV0ZRIRCgl3b3JrZXJfaWQYASAC" + 
          "KAkSDwoHdGFza19pZBgCIAIoCRIsCgZyZXN1bHQYAyACKA4yHC5UYXNrQ29t" + 
          "cGxldGUuVGFza1Jlc3VsdFR5cGUSFwoNZXJyb3JfbWVzc2FnZRgEIAEoCToA" + 
          "IikKDlRhc2tSZXN1bHRUeXBlEgsKB1NVQ0NFU1MQABIKCgZGQUlMRUQQAUJY" + 
          "ChhmbG93eS5zY2hlZHVsZXIucHJvdG9jYWxCCE1lc3NhZ2VzSAHCPi8KIkZs" + 
          "b3d5LlNjaGVkdWxlci5DU2hhcnBTREsuUHJvdG9jYWwSCUZTUF8wXzBfMQ==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_LoginRequest__Descriptor = Descriptor.MessageTypes[0];
        internal__static_LoginRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Flowy.Scheduler.CSharpSDK.Protocal.LoginRequest, global::Flowy.Scheduler.CSharpSDK.Protocal.LoginRequest.Builder>(internal__static_LoginRequest__Descriptor,
                new string[] { "AppId", "AppSecret", });
        internal__static_LoginResponse__Descriptor = Descriptor.MessageTypes[1];
        internal__static_LoginResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Flowy.Scheduler.CSharpSDK.Protocal.LoginResponse, global::Flowy.Scheduler.CSharpSDK.Protocal.LoginResponse.Builder>(internal__static_LoginResponse__Descriptor,
                new string[] { "ResultType", "FailReason", });
        internal__static_WorkerRegisterRequest__Descriptor = Descriptor.MessageTypes[2];
        internal__static_WorkerRegisterRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Flowy.Scheduler.CSharpSDK.Protocal.WorkerRegisterRequest, global::Flowy.Scheduler.CSharpSDK.Protocal.WorkerRegisterRequest.Builder>(internal__static_WorkerRegisterRequest__Descriptor,
                new string[] { "WorkerId", "WorkerName", "ExecuteTime", "Timeout", "ExecuteLastExpired", });
        internal__static_WorkerRegisterResponse__Descriptor = Descriptor.MessageTypes[3];
        internal__static_WorkerRegisterResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Flowy.Scheduler.CSharpSDK.Protocal.WorkerRegisterResponse, global::Flowy.Scheduler.CSharpSDK.Protocal.WorkerRegisterResponse.Builder>(internal__static_WorkerRegisterResponse__Descriptor,
                new string[] { "WorkerId", });
        internal__static_StartListenRequest__Descriptor = Descriptor.MessageTypes[4];
        internal__static_StartListenRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Flowy.Scheduler.CSharpSDK.Protocal.StartListenRequest, global::Flowy.Scheduler.CSharpSDK.Protocal.StartListenRequest.Builder>(internal__static_StartListenRequest__Descriptor,
                new string[] { "WorkerId", });
        internal__static_TaskNotify__Descriptor = Descriptor.MessageTypes[5];
        internal__static_TaskNotify__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Flowy.Scheduler.CSharpSDK.Protocal.TaskNotify, global::Flowy.Scheduler.CSharpSDK.Protocal.TaskNotify.Builder>(internal__static_TaskNotify__Descriptor,
                new string[] { "WorkerId", "TaskId", });
        internal__static_TaskStatusUpdate__Descriptor = Descriptor.MessageTypes[6];
        internal__static_TaskStatusUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Flowy.Scheduler.CSharpSDK.Protocal.TaskStatusUpdate, global::Flowy.Scheduler.CSharpSDK.Protocal.TaskStatusUpdate.Builder>(internal__static_TaskStatusUpdate__Descriptor,
                new string[] { "WorkerId", "TaskId", "Status", "Percentage", "ErrorMessage", });
        internal__static_TaskStart__Descriptor = Descriptor.MessageTypes[7];
        internal__static_TaskStart__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Flowy.Scheduler.CSharpSDK.Protocal.TaskStart, global::Flowy.Scheduler.CSharpSDK.Protocal.TaskStart.Builder>(internal__static_TaskStart__Descriptor,
                new string[] { "WorkerId", "TaskId", });
        internal__static_TaskRunning__Descriptor = Descriptor.MessageTypes[8];
        internal__static_TaskRunning__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Flowy.Scheduler.CSharpSDK.Protocal.TaskRunning, global::Flowy.Scheduler.CSharpSDK.Protocal.TaskRunning.Builder>(internal__static_TaskRunning__Descriptor,
                new string[] { "WorkerId", "TaskId", "Percentage", });
        internal__static_TaskComplete__Descriptor = Descriptor.MessageTypes[9];
        internal__static_TaskComplete__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Flowy.Scheduler.CSharpSDK.Protocal.TaskComplete, global::Flowy.Scheduler.CSharpSDK.Protocal.TaskComplete.Builder>(internal__static_TaskComplete__Descriptor,
                new string[] { "WorkerId", "TaskId", "Result", "ErrorMessage", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LoginRequest : pb::GeneratedMessage<LoginRequest, LoginRequest.Builder> {
    private LoginRequest() { }
    private static readonly LoginRequest defaultInstance = new LoginRequest().MakeReadOnly();
    private static readonly string[] _loginRequestFieldNames = new string[] { "app_id", "app_secret" };
    private static readonly uint[] _loginRequestFieldTags = new uint[] { 10, 18 };
    public static LoginRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LoginRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LoginRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.internal__static_LoginRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LoginRequest, LoginRequest.Builder> InternalFieldAccessors {
      get { return global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.internal__static_LoginRequest__FieldAccessorTable; }
    }
    
    public const int AppIdFieldNumber = 1;
    private bool hasAppId;
    private string appId_ = "";
    public bool HasAppId {
      get { return hasAppId; }
    }
    public string AppId {
      get { return appId_; }
    }
    
    public const int AppSecretFieldNumber = 2;
    private bool hasAppSecret;
    private string appSecret_ = "";
    public bool HasAppSecret {
      get { return hasAppSecret; }
    }
    public string AppSecret {
      get { return appSecret_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAppId) return false;
        if (!hasAppSecret) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _loginRequestFieldNames;
      if (hasAppId) {
        output.WriteString(1, field_names[0], AppId);
      }
      if (hasAppSecret) {
        output.WriteString(2, field_names[1], AppSecret);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAppId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, AppId);
        }
        if (hasAppSecret) {
          size += pb::CodedOutputStream.ComputeStringSize(2, AppSecret);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LoginRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LoginRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LoginRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LoginRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LoginRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LoginRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LoginRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LoginRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LoginRequest result;
      
      private LoginRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          LoginRequest original = result;
          result = new LoginRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LoginRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Flowy.Scheduler.CSharpSDK.Protocal.LoginRequest.Descriptor; }
      }
      
      public override LoginRequest DefaultInstanceForType {
        get { return global::Flowy.Scheduler.CSharpSDK.Protocal.LoginRequest.DefaultInstance; }
      }
      
      public override LoginRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LoginRequest) {
          return MergeFrom((LoginRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LoginRequest other) {
        if (other == global::Flowy.Scheduler.CSharpSDK.Protocal.LoginRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAppId) {
          AppId = other.AppId;
        }
        if (other.HasAppSecret) {
          AppSecret = other.AppSecret;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loginRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loginRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasAppId = input.ReadString(ref result.appId_);
              break;
            }
            case 18: {
              result.hasAppSecret = input.ReadString(ref result.appSecret_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAppId {
        get { return result.hasAppId; }
      }
      public string AppId {
        get { return result.AppId; }
        set { SetAppId(value); }
      }
      public Builder SetAppId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAppId = true;
        result.appId_ = value;
        return this;
      }
      public Builder ClearAppId() {
        PrepareBuilder();
        result.hasAppId = false;
        result.appId_ = "";
        return this;
      }
      
      public bool HasAppSecret {
        get { return result.hasAppSecret; }
      }
      public string AppSecret {
        get { return result.AppSecret; }
        set { SetAppSecret(value); }
      }
      public Builder SetAppSecret(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAppSecret = true;
        result.appSecret_ = value;
        return this;
      }
      public Builder ClearAppSecret() {
        PrepareBuilder();
        result.hasAppSecret = false;
        result.appSecret_ = "";
        return this;
      }
    }
    static LoginRequest() {
      object.ReferenceEquals(global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LoginResponse : pb::GeneratedMessage<LoginResponse, LoginResponse.Builder> {
    private LoginResponse() { }
    private static readonly LoginResponse defaultInstance = new LoginResponse().MakeReadOnly();
    private static readonly string[] _loginResponseFieldNames = new string[] { "failReason", "resultType" };
    private static readonly uint[] _loginResponseFieldTags = new uint[] { 18, 8 };
    public static LoginResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LoginResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LoginResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.internal__static_LoginResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LoginResponse, LoginResponse.Builder> InternalFieldAccessors {
      get { return global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.internal__static_LoginResponse__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum LoginResultType {
        SUCCESS = 0,
        FAILED = 1,
      }
      
    }
    #endregion
    
    public const int ResultTypeFieldNumber = 1;
    private bool hasResultType;
    private global::Flowy.Scheduler.CSharpSDK.Protocal.LoginResponse.Types.LoginResultType resultType_ = global::Flowy.Scheduler.CSharpSDK.Protocal.LoginResponse.Types.LoginResultType.SUCCESS;
    public bool HasResultType {
      get { return hasResultType; }
    }
    public global::Flowy.Scheduler.CSharpSDK.Protocal.LoginResponse.Types.LoginResultType ResultType {
      get { return resultType_; }
    }
    
    public const int FailReasonFieldNumber = 2;
    private bool hasFailReason;
    private string failReason_ = "";
    public bool HasFailReason {
      get { return hasFailReason; }
    }
    public string FailReason {
      get { return failReason_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasResultType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _loginResponseFieldNames;
      if (hasResultType) {
        output.WriteEnum(1, field_names[1], (int) ResultType, ResultType);
      }
      if (hasFailReason) {
        output.WriteString(2, field_names[0], FailReason);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasResultType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) ResultType);
        }
        if (hasFailReason) {
          size += pb::CodedOutputStream.ComputeStringSize(2, FailReason);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LoginResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LoginResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LoginResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LoginResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LoginResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LoginResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LoginResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LoginResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LoginResponse result;
      
      private LoginResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          LoginResponse original = result;
          result = new LoginResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LoginResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Flowy.Scheduler.CSharpSDK.Protocal.LoginResponse.Descriptor; }
      }
      
      public override LoginResponse DefaultInstanceForType {
        get { return global::Flowy.Scheduler.CSharpSDK.Protocal.LoginResponse.DefaultInstance; }
      }
      
      public override LoginResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LoginResponse) {
          return MergeFrom((LoginResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LoginResponse other) {
        if (other == global::Flowy.Scheduler.CSharpSDK.Protocal.LoginResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResultType) {
          ResultType = other.ResultType;
        }
        if (other.HasFailReason) {
          FailReason = other.FailReason;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loginResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loginResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.resultType_, out unknown)) {
                result.hasResultType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasFailReason = input.ReadString(ref result.failReason_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasResultType {
       get { return result.hasResultType; }
      }
      public global::Flowy.Scheduler.CSharpSDK.Protocal.LoginResponse.Types.LoginResultType ResultType {
        get { return result.ResultType; }
        set { SetResultType(value); }
      }
      public Builder SetResultType(global::Flowy.Scheduler.CSharpSDK.Protocal.LoginResponse.Types.LoginResultType value) {
        PrepareBuilder();
        result.hasResultType = true;
        result.resultType_ = value;
        return this;
      }
      public Builder ClearResultType() {
        PrepareBuilder();
        result.hasResultType = false;
        result.resultType_ = global::Flowy.Scheduler.CSharpSDK.Protocal.LoginResponse.Types.LoginResultType.SUCCESS;
        return this;
      }
      
      public bool HasFailReason {
        get { return result.hasFailReason; }
      }
      public string FailReason {
        get { return result.FailReason; }
        set { SetFailReason(value); }
      }
      public Builder SetFailReason(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFailReason = true;
        result.failReason_ = value;
        return this;
      }
      public Builder ClearFailReason() {
        PrepareBuilder();
        result.hasFailReason = false;
        result.failReason_ = "";
        return this;
      }
    }
    static LoginResponse() {
      object.ReferenceEquals(global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class WorkerRegisterRequest : pb::GeneratedMessage<WorkerRegisterRequest, WorkerRegisterRequest.Builder> {
    private WorkerRegisterRequest() { }
    private static readonly WorkerRegisterRequest defaultInstance = new WorkerRegisterRequest().MakeReadOnly();
    private static readonly string[] _workerRegisterRequestFieldNames = new string[] { "execute_last_expired", "execute_time", "timeout", "worker_id", "worker_name" };
    private static readonly uint[] _workerRegisterRequestFieldTags = new uint[] { 40, 26, 32, 10, 18 };
    public static WorkerRegisterRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override WorkerRegisterRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override WorkerRegisterRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.internal__static_WorkerRegisterRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<WorkerRegisterRequest, WorkerRegisterRequest.Builder> InternalFieldAccessors {
      get { return global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.internal__static_WorkerRegisterRequest__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum ExecuteLastExpiredType {
        RUN = 0,
        IGNORE = 1,
      }
      
    }
    #endregion
    
    public const int WorkerIdFieldNumber = 1;
    private bool hasWorkerId;
    private string workerId_ = "";
    public bool HasWorkerId {
      get { return hasWorkerId; }
    }
    public string WorkerId {
      get { return workerId_; }
    }
    
    public const int WorkerNameFieldNumber = 2;
    private bool hasWorkerName;
    private string workerName_ = "";
    public bool HasWorkerName {
      get { return hasWorkerName; }
    }
    public string WorkerName {
      get { return workerName_; }
    }
    
    public const int ExecuteTimeFieldNumber = 3;
    private pbc::PopsicleList<string> executeTime_ = new pbc::PopsicleList<string>();
    public scg::IList<string> ExecuteTimeList {
      get { return pbc::Lists.AsReadOnly(executeTime_); }
    }
    public int ExecuteTimeCount {
      get { return executeTime_.Count; }
    }
    public string GetExecuteTime(int index) {
      return executeTime_[index];
    }
    
    public const int TimeoutFieldNumber = 4;
    private bool hasTimeout;
    private int timeout_;
    public bool HasTimeout {
      get { return hasTimeout; }
    }
    public int Timeout {
      get { return timeout_; }
    }
    
    public const int ExecuteLastExpiredFieldNumber = 5;
    private bool hasExecuteLastExpired;
    private global::Flowy.Scheduler.CSharpSDK.Protocal.WorkerRegisterRequest.Types.ExecuteLastExpiredType executeLastExpired_ = global::Flowy.Scheduler.CSharpSDK.Protocal.WorkerRegisterRequest.Types.ExecuteLastExpiredType.RUN;
    public bool HasExecuteLastExpired {
      get { return hasExecuteLastExpired; }
    }
    public global::Flowy.Scheduler.CSharpSDK.Protocal.WorkerRegisterRequest.Types.ExecuteLastExpiredType ExecuteLastExpired {
      get { return executeLastExpired_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasWorkerId) return false;
        if (!hasWorkerName) return false;
        if (!hasTimeout) return false;
        if (!hasExecuteLastExpired) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _workerRegisterRequestFieldNames;
      if (hasWorkerId) {
        output.WriteString(1, field_names[3], WorkerId);
      }
      if (hasWorkerName) {
        output.WriteString(2, field_names[4], WorkerName);
      }
      if (executeTime_.Count > 0) {
        output.WriteStringArray(3, field_names[1], executeTime_);
      }
      if (hasTimeout) {
        output.WriteInt32(4, field_names[2], Timeout);
      }
      if (hasExecuteLastExpired) {
        output.WriteEnum(5, field_names[0], (int) ExecuteLastExpired, ExecuteLastExpired);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasWorkerId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, WorkerId);
        }
        if (hasWorkerName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, WorkerName);
        }
        {
          int dataSize = 0;
          foreach (string element in ExecuteTimeList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * executeTime_.Count;
        }
        if (hasTimeout) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Timeout);
        }
        if (hasExecuteLastExpired) {
          size += pb::CodedOutputStream.ComputeEnumSize(5, (int) ExecuteLastExpired);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static WorkerRegisterRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WorkerRegisterRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WorkerRegisterRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WorkerRegisterRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WorkerRegisterRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WorkerRegisterRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static WorkerRegisterRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static WorkerRegisterRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static WorkerRegisterRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WorkerRegisterRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private WorkerRegisterRequest MakeReadOnly() {
      executeTime_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(WorkerRegisterRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<WorkerRegisterRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(WorkerRegisterRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private WorkerRegisterRequest result;
      
      private WorkerRegisterRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          WorkerRegisterRequest original = result;
          result = new WorkerRegisterRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override WorkerRegisterRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Flowy.Scheduler.CSharpSDK.Protocal.WorkerRegisterRequest.Descriptor; }
      }
      
      public override WorkerRegisterRequest DefaultInstanceForType {
        get { return global::Flowy.Scheduler.CSharpSDK.Protocal.WorkerRegisterRequest.DefaultInstance; }
      }
      
      public override WorkerRegisterRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is WorkerRegisterRequest) {
          return MergeFrom((WorkerRegisterRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(WorkerRegisterRequest other) {
        if (other == global::Flowy.Scheduler.CSharpSDK.Protocal.WorkerRegisterRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWorkerId) {
          WorkerId = other.WorkerId;
        }
        if (other.HasWorkerName) {
          WorkerName = other.WorkerName;
        }
        if (other.executeTime_.Count != 0) {
          result.executeTime_.Add(other.executeTime_);
        }
        if (other.HasTimeout) {
          Timeout = other.Timeout;
        }
        if (other.HasExecuteLastExpired) {
          ExecuteLastExpired = other.ExecuteLastExpired;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_workerRegisterRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _workerRegisterRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasWorkerId = input.ReadString(ref result.workerId_);
              break;
            }
            case 18: {
              result.hasWorkerName = input.ReadString(ref result.workerName_);
              break;
            }
            case 26: {
              input.ReadStringArray(tag, field_name, result.executeTime_);
              break;
            }
            case 32: {
              result.hasTimeout = input.ReadInt32(ref result.timeout_);
              break;
            }
            case 40: {
              object unknown;
              if(input.ReadEnum(ref result.executeLastExpired_, out unknown)) {
                result.hasExecuteLastExpired = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(5, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWorkerId {
        get { return result.hasWorkerId; }
      }
      public string WorkerId {
        get { return result.WorkerId; }
        set { SetWorkerId(value); }
      }
      public Builder SetWorkerId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorkerId = true;
        result.workerId_ = value;
        return this;
      }
      public Builder ClearWorkerId() {
        PrepareBuilder();
        result.hasWorkerId = false;
        result.workerId_ = "";
        return this;
      }
      
      public bool HasWorkerName {
        get { return result.hasWorkerName; }
      }
      public string WorkerName {
        get { return result.WorkerName; }
        set { SetWorkerName(value); }
      }
      public Builder SetWorkerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorkerName = true;
        result.workerName_ = value;
        return this;
      }
      public Builder ClearWorkerName() {
        PrepareBuilder();
        result.hasWorkerName = false;
        result.workerName_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> ExecuteTimeList {
        get { return PrepareBuilder().executeTime_; }
      }
      public int ExecuteTimeCount {
        get { return result.ExecuteTimeCount; }
      }
      public string GetExecuteTime(int index) {
        return result.GetExecuteTime(index);
      }
      public Builder SetExecuteTime(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.executeTime_[index] = value;
        return this;
      }
      public Builder AddExecuteTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.executeTime_.Add(value);
        return this;
      }
      public Builder AddRangeExecuteTime(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.executeTime_.Add(values);
        return this;
      }
      public Builder ClearExecuteTime() {
        PrepareBuilder();
        result.executeTime_.Clear();
        return this;
      }
      
      public bool HasTimeout {
        get { return result.hasTimeout; }
      }
      public int Timeout {
        get { return result.Timeout; }
        set { SetTimeout(value); }
      }
      public Builder SetTimeout(int value) {
        PrepareBuilder();
        result.hasTimeout = true;
        result.timeout_ = value;
        return this;
      }
      public Builder ClearTimeout() {
        PrepareBuilder();
        result.hasTimeout = false;
        result.timeout_ = 0;
        return this;
      }
      
      public bool HasExecuteLastExpired {
       get { return result.hasExecuteLastExpired; }
      }
      public global::Flowy.Scheduler.CSharpSDK.Protocal.WorkerRegisterRequest.Types.ExecuteLastExpiredType ExecuteLastExpired {
        get { return result.ExecuteLastExpired; }
        set { SetExecuteLastExpired(value); }
      }
      public Builder SetExecuteLastExpired(global::Flowy.Scheduler.CSharpSDK.Protocal.WorkerRegisterRequest.Types.ExecuteLastExpiredType value) {
        PrepareBuilder();
        result.hasExecuteLastExpired = true;
        result.executeLastExpired_ = value;
        return this;
      }
      public Builder ClearExecuteLastExpired() {
        PrepareBuilder();
        result.hasExecuteLastExpired = false;
        result.executeLastExpired_ = global::Flowy.Scheduler.CSharpSDK.Protocal.WorkerRegisterRequest.Types.ExecuteLastExpiredType.RUN;
        return this;
      }
    }
    static WorkerRegisterRequest() {
      object.ReferenceEquals(global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class WorkerRegisterResponse : pb::GeneratedMessage<WorkerRegisterResponse, WorkerRegisterResponse.Builder> {
    private WorkerRegisterResponse() { }
    private static readonly WorkerRegisterResponse defaultInstance = new WorkerRegisterResponse().MakeReadOnly();
    private static readonly string[] _workerRegisterResponseFieldNames = new string[] { "worker_id" };
    private static readonly uint[] _workerRegisterResponseFieldTags = new uint[] { 10 };
    public static WorkerRegisterResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override WorkerRegisterResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override WorkerRegisterResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.internal__static_WorkerRegisterResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<WorkerRegisterResponse, WorkerRegisterResponse.Builder> InternalFieldAccessors {
      get { return global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.internal__static_WorkerRegisterResponse__FieldAccessorTable; }
    }
    
    public const int WorkerIdFieldNumber = 1;
    private bool hasWorkerId;
    private string workerId_ = "";
    public bool HasWorkerId {
      get { return hasWorkerId; }
    }
    public string WorkerId {
      get { return workerId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasWorkerId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _workerRegisterResponseFieldNames;
      if (hasWorkerId) {
        output.WriteString(1, field_names[0], WorkerId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasWorkerId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, WorkerId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static WorkerRegisterResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WorkerRegisterResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WorkerRegisterResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WorkerRegisterResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WorkerRegisterResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WorkerRegisterResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static WorkerRegisterResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static WorkerRegisterResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static WorkerRegisterResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WorkerRegisterResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private WorkerRegisterResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(WorkerRegisterResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<WorkerRegisterResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(WorkerRegisterResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private WorkerRegisterResponse result;
      
      private WorkerRegisterResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          WorkerRegisterResponse original = result;
          result = new WorkerRegisterResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override WorkerRegisterResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Flowy.Scheduler.CSharpSDK.Protocal.WorkerRegisterResponse.Descriptor; }
      }
      
      public override WorkerRegisterResponse DefaultInstanceForType {
        get { return global::Flowy.Scheduler.CSharpSDK.Protocal.WorkerRegisterResponse.DefaultInstance; }
      }
      
      public override WorkerRegisterResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is WorkerRegisterResponse) {
          return MergeFrom((WorkerRegisterResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(WorkerRegisterResponse other) {
        if (other == global::Flowy.Scheduler.CSharpSDK.Protocal.WorkerRegisterResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWorkerId) {
          WorkerId = other.WorkerId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_workerRegisterResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _workerRegisterResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasWorkerId = input.ReadString(ref result.workerId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWorkerId {
        get { return result.hasWorkerId; }
      }
      public string WorkerId {
        get { return result.WorkerId; }
        set { SetWorkerId(value); }
      }
      public Builder SetWorkerId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorkerId = true;
        result.workerId_ = value;
        return this;
      }
      public Builder ClearWorkerId() {
        PrepareBuilder();
        result.hasWorkerId = false;
        result.workerId_ = "";
        return this;
      }
    }
    static WorkerRegisterResponse() {
      object.ReferenceEquals(global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StartListenRequest : pb::GeneratedMessage<StartListenRequest, StartListenRequest.Builder> {
    private StartListenRequest() { }
    private static readonly StartListenRequest defaultInstance = new StartListenRequest().MakeReadOnly();
    private static readonly string[] _startListenRequestFieldNames = new string[] { "worker_id" };
    private static readonly uint[] _startListenRequestFieldTags = new uint[] { 10 };
    public static StartListenRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StartListenRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StartListenRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.internal__static_StartListenRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StartListenRequest, StartListenRequest.Builder> InternalFieldAccessors {
      get { return global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.internal__static_StartListenRequest__FieldAccessorTable; }
    }
    
    public const int WorkerIdFieldNumber = 1;
    private bool hasWorkerId;
    private string workerId_ = "";
    public bool HasWorkerId {
      get { return hasWorkerId; }
    }
    public string WorkerId {
      get { return workerId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasWorkerId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _startListenRequestFieldNames;
      if (hasWorkerId) {
        output.WriteString(1, field_names[0], WorkerId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasWorkerId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, WorkerId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StartListenRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StartListenRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StartListenRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StartListenRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StartListenRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StartListenRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StartListenRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StartListenRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StartListenRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StartListenRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StartListenRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StartListenRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StartListenRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StartListenRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StartListenRequest result;
      
      private StartListenRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          StartListenRequest original = result;
          result = new StartListenRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StartListenRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Flowy.Scheduler.CSharpSDK.Protocal.StartListenRequest.Descriptor; }
      }
      
      public override StartListenRequest DefaultInstanceForType {
        get { return global::Flowy.Scheduler.CSharpSDK.Protocal.StartListenRequest.DefaultInstance; }
      }
      
      public override StartListenRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StartListenRequest) {
          return MergeFrom((StartListenRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StartListenRequest other) {
        if (other == global::Flowy.Scheduler.CSharpSDK.Protocal.StartListenRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWorkerId) {
          WorkerId = other.WorkerId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_startListenRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _startListenRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasWorkerId = input.ReadString(ref result.workerId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWorkerId {
        get { return result.hasWorkerId; }
      }
      public string WorkerId {
        get { return result.WorkerId; }
        set { SetWorkerId(value); }
      }
      public Builder SetWorkerId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorkerId = true;
        result.workerId_ = value;
        return this;
      }
      public Builder ClearWorkerId() {
        PrepareBuilder();
        result.hasWorkerId = false;
        result.workerId_ = "";
        return this;
      }
    }
    static StartListenRequest() {
      object.ReferenceEquals(global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TaskNotify : pb::GeneratedMessage<TaskNotify, TaskNotify.Builder> {
    private TaskNotify() { }
    private static readonly TaskNotify defaultInstance = new TaskNotify().MakeReadOnly();
    private static readonly string[] _taskNotifyFieldNames = new string[] { "task_id", "worker_id" };
    private static readonly uint[] _taskNotifyFieldTags = new uint[] { 18, 10 };
    public static TaskNotify DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TaskNotify DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TaskNotify ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.internal__static_TaskNotify__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TaskNotify, TaskNotify.Builder> InternalFieldAccessors {
      get { return global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.internal__static_TaskNotify__FieldAccessorTable; }
    }
    
    public const int WorkerIdFieldNumber = 1;
    private bool hasWorkerId;
    private string workerId_ = "";
    public bool HasWorkerId {
      get { return hasWorkerId; }
    }
    public string WorkerId {
      get { return workerId_; }
    }
    
    public const int TaskIdFieldNumber = 2;
    private bool hasTaskId;
    private string taskId_ = "";
    public bool HasTaskId {
      get { return hasTaskId; }
    }
    public string TaskId {
      get { return taskId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasWorkerId) return false;
        if (!hasTaskId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _taskNotifyFieldNames;
      if (hasWorkerId) {
        output.WriteString(1, field_names[1], WorkerId);
      }
      if (hasTaskId) {
        output.WriteString(2, field_names[0], TaskId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasWorkerId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, WorkerId);
        }
        if (hasTaskId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, TaskId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TaskNotify ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TaskNotify ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TaskNotify ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TaskNotify ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TaskNotify ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TaskNotify ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TaskNotify ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TaskNotify ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TaskNotify ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TaskNotify ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TaskNotify MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TaskNotify prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TaskNotify, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TaskNotify cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TaskNotify result;
      
      private TaskNotify PrepareBuilder() {
        if (resultIsReadOnly) {
          TaskNotify original = result;
          result = new TaskNotify();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TaskNotify MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Flowy.Scheduler.CSharpSDK.Protocal.TaskNotify.Descriptor; }
      }
      
      public override TaskNotify DefaultInstanceForType {
        get { return global::Flowy.Scheduler.CSharpSDK.Protocal.TaskNotify.DefaultInstance; }
      }
      
      public override TaskNotify BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TaskNotify) {
          return MergeFrom((TaskNotify) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TaskNotify other) {
        if (other == global::Flowy.Scheduler.CSharpSDK.Protocal.TaskNotify.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWorkerId) {
          WorkerId = other.WorkerId;
        }
        if (other.HasTaskId) {
          TaskId = other.TaskId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_taskNotifyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _taskNotifyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasWorkerId = input.ReadString(ref result.workerId_);
              break;
            }
            case 18: {
              result.hasTaskId = input.ReadString(ref result.taskId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWorkerId {
        get { return result.hasWorkerId; }
      }
      public string WorkerId {
        get { return result.WorkerId; }
        set { SetWorkerId(value); }
      }
      public Builder SetWorkerId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorkerId = true;
        result.workerId_ = value;
        return this;
      }
      public Builder ClearWorkerId() {
        PrepareBuilder();
        result.hasWorkerId = false;
        result.workerId_ = "";
        return this;
      }
      
      public bool HasTaskId {
        get { return result.hasTaskId; }
      }
      public string TaskId {
        get { return result.TaskId; }
        set { SetTaskId(value); }
      }
      public Builder SetTaskId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTaskId = true;
        result.taskId_ = value;
        return this;
      }
      public Builder ClearTaskId() {
        PrepareBuilder();
        result.hasTaskId = false;
        result.taskId_ = "";
        return this;
      }
    }
    static TaskNotify() {
      object.ReferenceEquals(global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TaskStatusUpdate : pb::GeneratedMessage<TaskStatusUpdate, TaskStatusUpdate.Builder> {
    private TaskStatusUpdate() { }
    private static readonly TaskStatusUpdate defaultInstance = new TaskStatusUpdate().MakeReadOnly();
    private static readonly string[] _taskStatusUpdateFieldNames = new string[] { "error_message", "percentage", "status", "task_id", "worker_id" };
    private static readonly uint[] _taskStatusUpdateFieldTags = new uint[] { 42, 32, 24, 18, 10 };
    public static TaskStatusUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TaskStatusUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TaskStatusUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.internal__static_TaskStatusUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TaskStatusUpdate, TaskStatusUpdate.Builder> InternalFieldAccessors {
      get { return global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.internal__static_TaskStatusUpdate__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Status {
        START = 0,
        RUNNING = 1,
        STOP = 2,
      }
      
    }
    #endregion
    
    public const int WorkerIdFieldNumber = 1;
    private bool hasWorkerId;
    private string workerId_ = "";
    public bool HasWorkerId {
      get { return hasWorkerId; }
    }
    public string WorkerId {
      get { return workerId_; }
    }
    
    public const int TaskIdFieldNumber = 2;
    private bool hasTaskId;
    private string taskId_ = "";
    public bool HasTaskId {
      get { return hasTaskId; }
    }
    public string TaskId {
      get { return taskId_; }
    }
    
    public const int StatusFieldNumber = 3;
    private bool hasStatus;
    private global::Flowy.Scheduler.CSharpSDK.Protocal.TaskStatusUpdate.Types.Status status_ = global::Flowy.Scheduler.CSharpSDK.Protocal.TaskStatusUpdate.Types.Status.START;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public global::Flowy.Scheduler.CSharpSDK.Protocal.TaskStatusUpdate.Types.Status Status {
      get { return status_; }
    }
    
    public const int PercentageFieldNumber = 4;
    private bool hasPercentage;
    private int percentage_;
    public bool HasPercentage {
      get { return hasPercentage; }
    }
    public int Percentage {
      get { return percentage_; }
    }
    
    public const int ErrorMessageFieldNumber = 5;
    private bool hasErrorMessage;
    private string errorMessage_ = "";
    public bool HasErrorMessage {
      get { return hasErrorMessage; }
    }
    public string ErrorMessage {
      get { return errorMessage_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasWorkerId) return false;
        if (!hasTaskId) return false;
        if (!hasStatus) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _taskStatusUpdateFieldNames;
      if (hasWorkerId) {
        output.WriteString(1, field_names[4], WorkerId);
      }
      if (hasTaskId) {
        output.WriteString(2, field_names[3], TaskId);
      }
      if (hasStatus) {
        output.WriteEnum(3, field_names[2], (int) Status, Status);
      }
      if (hasPercentage) {
        output.WriteInt32(4, field_names[1], Percentage);
      }
      if (hasErrorMessage) {
        output.WriteString(5, field_names[0], ErrorMessage);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasWorkerId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, WorkerId);
        }
        if (hasTaskId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, TaskId);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Status);
        }
        if (hasPercentage) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Percentage);
        }
        if (hasErrorMessage) {
          size += pb::CodedOutputStream.ComputeStringSize(5, ErrorMessage);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TaskStatusUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TaskStatusUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TaskStatusUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TaskStatusUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TaskStatusUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TaskStatusUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TaskStatusUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TaskStatusUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TaskStatusUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TaskStatusUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TaskStatusUpdate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TaskStatusUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TaskStatusUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TaskStatusUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TaskStatusUpdate result;
      
      private TaskStatusUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          TaskStatusUpdate original = result;
          result = new TaskStatusUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TaskStatusUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Flowy.Scheduler.CSharpSDK.Protocal.TaskStatusUpdate.Descriptor; }
      }
      
      public override TaskStatusUpdate DefaultInstanceForType {
        get { return global::Flowy.Scheduler.CSharpSDK.Protocal.TaskStatusUpdate.DefaultInstance; }
      }
      
      public override TaskStatusUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TaskStatusUpdate) {
          return MergeFrom((TaskStatusUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TaskStatusUpdate other) {
        if (other == global::Flowy.Scheduler.CSharpSDK.Protocal.TaskStatusUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWorkerId) {
          WorkerId = other.WorkerId;
        }
        if (other.HasTaskId) {
          TaskId = other.TaskId;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasPercentage) {
          Percentage = other.Percentage;
        }
        if (other.HasErrorMessage) {
          ErrorMessage = other.ErrorMessage;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_taskStatusUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _taskStatusUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasWorkerId = input.ReadString(ref result.workerId_);
              break;
            }
            case 18: {
              result.hasTaskId = input.ReadString(ref result.taskId_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.status_, out unknown)) {
                result.hasStatus = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
            case 32: {
              result.hasPercentage = input.ReadInt32(ref result.percentage_);
              break;
            }
            case 42: {
              result.hasErrorMessage = input.ReadString(ref result.errorMessage_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWorkerId {
        get { return result.hasWorkerId; }
      }
      public string WorkerId {
        get { return result.WorkerId; }
        set { SetWorkerId(value); }
      }
      public Builder SetWorkerId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorkerId = true;
        result.workerId_ = value;
        return this;
      }
      public Builder ClearWorkerId() {
        PrepareBuilder();
        result.hasWorkerId = false;
        result.workerId_ = "";
        return this;
      }
      
      public bool HasTaskId {
        get { return result.hasTaskId; }
      }
      public string TaskId {
        get { return result.TaskId; }
        set { SetTaskId(value); }
      }
      public Builder SetTaskId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTaskId = true;
        result.taskId_ = value;
        return this;
      }
      public Builder ClearTaskId() {
        PrepareBuilder();
        result.hasTaskId = false;
        result.taskId_ = "";
        return this;
      }
      
      public bool HasStatus {
       get { return result.hasStatus; }
      }
      public global::Flowy.Scheduler.CSharpSDK.Protocal.TaskStatusUpdate.Types.Status Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(global::Flowy.Scheduler.CSharpSDK.Protocal.TaskStatusUpdate.Types.Status value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = global::Flowy.Scheduler.CSharpSDK.Protocal.TaskStatusUpdate.Types.Status.START;
        return this;
      }
      
      public bool HasPercentage {
        get { return result.hasPercentage; }
      }
      public int Percentage {
        get { return result.Percentage; }
        set { SetPercentage(value); }
      }
      public Builder SetPercentage(int value) {
        PrepareBuilder();
        result.hasPercentage = true;
        result.percentage_ = value;
        return this;
      }
      public Builder ClearPercentage() {
        PrepareBuilder();
        result.hasPercentage = false;
        result.percentage_ = 0;
        return this;
      }
      
      public bool HasErrorMessage {
        get { return result.hasErrorMessage; }
      }
      public string ErrorMessage {
        get { return result.ErrorMessage; }
        set { SetErrorMessage(value); }
      }
      public Builder SetErrorMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasErrorMessage = true;
        result.errorMessage_ = value;
        return this;
      }
      public Builder ClearErrorMessage() {
        PrepareBuilder();
        result.hasErrorMessage = false;
        result.errorMessage_ = "";
        return this;
      }
    }
    static TaskStatusUpdate() {
      object.ReferenceEquals(global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TaskStart : pb::GeneratedMessage<TaskStart, TaskStart.Builder> {
    private TaskStart() { }
    private static readonly TaskStart defaultInstance = new TaskStart().MakeReadOnly();
    private static readonly string[] _taskStartFieldNames = new string[] { "task_id", "worker_id" };
    private static readonly uint[] _taskStartFieldTags = new uint[] { 18, 10 };
    public static TaskStart DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TaskStart DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TaskStart ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.internal__static_TaskStart__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TaskStart, TaskStart.Builder> InternalFieldAccessors {
      get { return global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.internal__static_TaskStart__FieldAccessorTable; }
    }
    
    public const int WorkerIdFieldNumber = 1;
    private bool hasWorkerId;
    private string workerId_ = "";
    public bool HasWorkerId {
      get { return hasWorkerId; }
    }
    public string WorkerId {
      get { return workerId_; }
    }
    
    public const int TaskIdFieldNumber = 2;
    private bool hasTaskId;
    private string taskId_ = "";
    public bool HasTaskId {
      get { return hasTaskId; }
    }
    public string TaskId {
      get { return taskId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasWorkerId) return false;
        if (!hasTaskId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _taskStartFieldNames;
      if (hasWorkerId) {
        output.WriteString(1, field_names[1], WorkerId);
      }
      if (hasTaskId) {
        output.WriteString(2, field_names[0], TaskId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasWorkerId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, WorkerId);
        }
        if (hasTaskId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, TaskId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TaskStart ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TaskStart ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TaskStart ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TaskStart ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TaskStart ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TaskStart ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TaskStart ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TaskStart ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TaskStart ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TaskStart ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TaskStart MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TaskStart prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TaskStart, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TaskStart cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TaskStart result;
      
      private TaskStart PrepareBuilder() {
        if (resultIsReadOnly) {
          TaskStart original = result;
          result = new TaskStart();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TaskStart MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Flowy.Scheduler.CSharpSDK.Protocal.TaskStart.Descriptor; }
      }
      
      public override TaskStart DefaultInstanceForType {
        get { return global::Flowy.Scheduler.CSharpSDK.Protocal.TaskStart.DefaultInstance; }
      }
      
      public override TaskStart BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TaskStart) {
          return MergeFrom((TaskStart) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TaskStart other) {
        if (other == global::Flowy.Scheduler.CSharpSDK.Protocal.TaskStart.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWorkerId) {
          WorkerId = other.WorkerId;
        }
        if (other.HasTaskId) {
          TaskId = other.TaskId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_taskStartFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _taskStartFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasWorkerId = input.ReadString(ref result.workerId_);
              break;
            }
            case 18: {
              result.hasTaskId = input.ReadString(ref result.taskId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWorkerId {
        get { return result.hasWorkerId; }
      }
      public string WorkerId {
        get { return result.WorkerId; }
        set { SetWorkerId(value); }
      }
      public Builder SetWorkerId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorkerId = true;
        result.workerId_ = value;
        return this;
      }
      public Builder ClearWorkerId() {
        PrepareBuilder();
        result.hasWorkerId = false;
        result.workerId_ = "";
        return this;
      }
      
      public bool HasTaskId {
        get { return result.hasTaskId; }
      }
      public string TaskId {
        get { return result.TaskId; }
        set { SetTaskId(value); }
      }
      public Builder SetTaskId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTaskId = true;
        result.taskId_ = value;
        return this;
      }
      public Builder ClearTaskId() {
        PrepareBuilder();
        result.hasTaskId = false;
        result.taskId_ = "";
        return this;
      }
    }
    static TaskStart() {
      object.ReferenceEquals(global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TaskRunning : pb::GeneratedMessage<TaskRunning, TaskRunning.Builder> {
    private TaskRunning() { }
    private static readonly TaskRunning defaultInstance = new TaskRunning().MakeReadOnly();
    private static readonly string[] _taskRunningFieldNames = new string[] { "percentage", "task_id", "worker_id" };
    private static readonly uint[] _taskRunningFieldTags = new uint[] { 24, 18, 10 };
    public static TaskRunning DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TaskRunning DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TaskRunning ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.internal__static_TaskRunning__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TaskRunning, TaskRunning.Builder> InternalFieldAccessors {
      get { return global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.internal__static_TaskRunning__FieldAccessorTable; }
    }
    
    public const int WorkerIdFieldNumber = 1;
    private bool hasWorkerId;
    private string workerId_ = "";
    public bool HasWorkerId {
      get { return hasWorkerId; }
    }
    public string WorkerId {
      get { return workerId_; }
    }
    
    public const int TaskIdFieldNumber = 2;
    private bool hasTaskId;
    private string taskId_ = "";
    public bool HasTaskId {
      get { return hasTaskId; }
    }
    public string TaskId {
      get { return taskId_; }
    }
    
    public const int PercentageFieldNumber = 3;
    private bool hasPercentage;
    private int percentage_;
    public bool HasPercentage {
      get { return hasPercentage; }
    }
    public int Percentage {
      get { return percentage_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasWorkerId) return false;
        if (!hasTaskId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _taskRunningFieldNames;
      if (hasWorkerId) {
        output.WriteString(1, field_names[2], WorkerId);
      }
      if (hasTaskId) {
        output.WriteString(2, field_names[1], TaskId);
      }
      if (hasPercentage) {
        output.WriteInt32(3, field_names[0], Percentage);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasWorkerId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, WorkerId);
        }
        if (hasTaskId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, TaskId);
        }
        if (hasPercentage) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Percentage);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TaskRunning ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TaskRunning ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TaskRunning ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TaskRunning ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TaskRunning ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TaskRunning ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TaskRunning ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TaskRunning ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TaskRunning ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TaskRunning ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TaskRunning MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TaskRunning prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TaskRunning, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TaskRunning cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TaskRunning result;
      
      private TaskRunning PrepareBuilder() {
        if (resultIsReadOnly) {
          TaskRunning original = result;
          result = new TaskRunning();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TaskRunning MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Flowy.Scheduler.CSharpSDK.Protocal.TaskRunning.Descriptor; }
      }
      
      public override TaskRunning DefaultInstanceForType {
        get { return global::Flowy.Scheduler.CSharpSDK.Protocal.TaskRunning.DefaultInstance; }
      }
      
      public override TaskRunning BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TaskRunning) {
          return MergeFrom((TaskRunning) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TaskRunning other) {
        if (other == global::Flowy.Scheduler.CSharpSDK.Protocal.TaskRunning.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWorkerId) {
          WorkerId = other.WorkerId;
        }
        if (other.HasTaskId) {
          TaskId = other.TaskId;
        }
        if (other.HasPercentage) {
          Percentage = other.Percentage;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_taskRunningFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _taskRunningFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasWorkerId = input.ReadString(ref result.workerId_);
              break;
            }
            case 18: {
              result.hasTaskId = input.ReadString(ref result.taskId_);
              break;
            }
            case 24: {
              result.hasPercentage = input.ReadInt32(ref result.percentage_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWorkerId {
        get { return result.hasWorkerId; }
      }
      public string WorkerId {
        get { return result.WorkerId; }
        set { SetWorkerId(value); }
      }
      public Builder SetWorkerId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorkerId = true;
        result.workerId_ = value;
        return this;
      }
      public Builder ClearWorkerId() {
        PrepareBuilder();
        result.hasWorkerId = false;
        result.workerId_ = "";
        return this;
      }
      
      public bool HasTaskId {
        get { return result.hasTaskId; }
      }
      public string TaskId {
        get { return result.TaskId; }
        set { SetTaskId(value); }
      }
      public Builder SetTaskId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTaskId = true;
        result.taskId_ = value;
        return this;
      }
      public Builder ClearTaskId() {
        PrepareBuilder();
        result.hasTaskId = false;
        result.taskId_ = "";
        return this;
      }
      
      public bool HasPercentage {
        get { return result.hasPercentage; }
      }
      public int Percentage {
        get { return result.Percentage; }
        set { SetPercentage(value); }
      }
      public Builder SetPercentage(int value) {
        PrepareBuilder();
        result.hasPercentage = true;
        result.percentage_ = value;
        return this;
      }
      public Builder ClearPercentage() {
        PrepareBuilder();
        result.hasPercentage = false;
        result.percentage_ = 0;
        return this;
      }
    }
    static TaskRunning() {
      object.ReferenceEquals(global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TaskComplete : pb::GeneratedMessage<TaskComplete, TaskComplete.Builder> {
    private TaskComplete() { }
    private static readonly TaskComplete defaultInstance = new TaskComplete().MakeReadOnly();
    private static readonly string[] _taskCompleteFieldNames = new string[] { "error_message", "result", "task_id", "worker_id" };
    private static readonly uint[] _taskCompleteFieldTags = new uint[] { 34, 24, 18, 10 };
    public static TaskComplete DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TaskComplete DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TaskComplete ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.internal__static_TaskComplete__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TaskComplete, TaskComplete.Builder> InternalFieldAccessors {
      get { return global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.internal__static_TaskComplete__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum TaskResultType {
        SUCCESS = 0,
        FAILED = 1,
      }
      
    }
    #endregion
    
    public const int WorkerIdFieldNumber = 1;
    private bool hasWorkerId;
    private string workerId_ = "";
    public bool HasWorkerId {
      get { return hasWorkerId; }
    }
    public string WorkerId {
      get { return workerId_; }
    }
    
    public const int TaskIdFieldNumber = 2;
    private bool hasTaskId;
    private string taskId_ = "";
    public bool HasTaskId {
      get { return hasTaskId; }
    }
    public string TaskId {
      get { return taskId_; }
    }
    
    public const int ResultFieldNumber = 3;
    private bool hasResult;
    private global::Flowy.Scheduler.CSharpSDK.Protocal.TaskComplete.Types.TaskResultType result_ = global::Flowy.Scheduler.CSharpSDK.Protocal.TaskComplete.Types.TaskResultType.SUCCESS;
    public bool HasResult {
      get { return hasResult; }
    }
    public global::Flowy.Scheduler.CSharpSDK.Protocal.TaskComplete.Types.TaskResultType Result {
      get { return result_; }
    }
    
    public const int ErrorMessageFieldNumber = 4;
    private bool hasErrorMessage;
    private string errorMessage_ = "";
    public bool HasErrorMessage {
      get { return hasErrorMessage; }
    }
    public string ErrorMessage {
      get { return errorMessage_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasWorkerId) return false;
        if (!hasTaskId) return false;
        if (!hasResult) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _taskCompleteFieldNames;
      if (hasWorkerId) {
        output.WriteString(1, field_names[3], WorkerId);
      }
      if (hasTaskId) {
        output.WriteString(2, field_names[2], TaskId);
      }
      if (hasResult) {
        output.WriteEnum(3, field_names[1], (int) Result, Result);
      }
      if (hasErrorMessage) {
        output.WriteString(4, field_names[0], ErrorMessage);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasWorkerId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, WorkerId);
        }
        if (hasTaskId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, TaskId);
        }
        if (hasResult) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Result);
        }
        if (hasErrorMessage) {
          size += pb::CodedOutputStream.ComputeStringSize(4, ErrorMessage);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TaskComplete ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TaskComplete ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TaskComplete ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TaskComplete ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TaskComplete ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TaskComplete ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TaskComplete ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TaskComplete ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TaskComplete ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TaskComplete ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TaskComplete MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TaskComplete prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TaskComplete, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TaskComplete cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TaskComplete result;
      
      private TaskComplete PrepareBuilder() {
        if (resultIsReadOnly) {
          TaskComplete original = result;
          result = new TaskComplete();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TaskComplete MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Flowy.Scheduler.CSharpSDK.Protocal.TaskComplete.Descriptor; }
      }
      
      public override TaskComplete DefaultInstanceForType {
        get { return global::Flowy.Scheduler.CSharpSDK.Protocal.TaskComplete.DefaultInstance; }
      }
      
      public override TaskComplete BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TaskComplete) {
          return MergeFrom((TaskComplete) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TaskComplete other) {
        if (other == global::Flowy.Scheduler.CSharpSDK.Protocal.TaskComplete.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWorkerId) {
          WorkerId = other.WorkerId;
        }
        if (other.HasTaskId) {
          TaskId = other.TaskId;
        }
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasErrorMessage) {
          ErrorMessage = other.ErrorMessage;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_taskCompleteFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _taskCompleteFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasWorkerId = input.ReadString(ref result.workerId_);
              break;
            }
            case 18: {
              result.hasTaskId = input.ReadString(ref result.taskId_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.result_, out unknown)) {
                result.hasResult = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
            case 34: {
              result.hasErrorMessage = input.ReadString(ref result.errorMessage_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWorkerId {
        get { return result.hasWorkerId; }
      }
      public string WorkerId {
        get { return result.WorkerId; }
        set { SetWorkerId(value); }
      }
      public Builder SetWorkerId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWorkerId = true;
        result.workerId_ = value;
        return this;
      }
      public Builder ClearWorkerId() {
        PrepareBuilder();
        result.hasWorkerId = false;
        result.workerId_ = "";
        return this;
      }
      
      public bool HasTaskId {
        get { return result.hasTaskId; }
      }
      public string TaskId {
        get { return result.TaskId; }
        set { SetTaskId(value); }
      }
      public Builder SetTaskId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTaskId = true;
        result.taskId_ = value;
        return this;
      }
      public Builder ClearTaskId() {
        PrepareBuilder();
        result.hasTaskId = false;
        result.taskId_ = "";
        return this;
      }
      
      public bool HasResult {
       get { return result.hasResult; }
      }
      public global::Flowy.Scheduler.CSharpSDK.Protocal.TaskComplete.Types.TaskResultType Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(global::Flowy.Scheduler.CSharpSDK.Protocal.TaskComplete.Types.TaskResultType value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = global::Flowy.Scheduler.CSharpSDK.Protocal.TaskComplete.Types.TaskResultType.SUCCESS;
        return this;
      }
      
      public bool HasErrorMessage {
        get { return result.hasErrorMessage; }
      }
      public string ErrorMessage {
        get { return result.ErrorMessage; }
        set { SetErrorMessage(value); }
      }
      public Builder SetErrorMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasErrorMessage = true;
        result.errorMessage_ = value;
        return this;
      }
      public Builder ClearErrorMessage() {
        PrepareBuilder();
        result.hasErrorMessage = false;
        result.errorMessage_ = "";
        return this;
      }
    }
    static TaskComplete() {
      object.ReferenceEquals(global::Flowy.Scheduler.CSharpSDK.Protocal.FSP_0_0_1.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
